import numpy as np # імпорт бібліотеки numpy, як np(скорочена назва)
from PIL import Image, ImageDraw # імпорт бібліотеки Pillow, а саме класу "Image" , який представляє картинку, а також класу "ImageDraw", який дозволяє працювати з картинкою
import sys # імпорт модуля, який надає доступ до деяких змінних та функцій, які взаємодіють з інтерпретатором python 

print(sys.getrecursionlimit()) #виводить глибину стеку, яка зараз доступна
sys.setrecursionlimit(150000) #встановлює максимальну глибину стеку

def fillarea(a,x,y): #створення функції, яка замальовує знайдені фігури(приймає на вхід всю матрицю фігури, та кординату пікселя по Ox, Oy)
  if (x<0) or (y<0) or (x>=a.shape[1]) or (y>=a.shape[0]): #borders #встановлюються рамки фігури, яку потрібно заповнити червоним кольором
    return 0
  val=a[y,x] #координати точки в масиві а, яка заповниться червоним кольором
  if val[0]==255: #just R
    return 0
#  print('x=',x,'y=',y)
#  a[x,y]=[255,255,255]; #clear point as White
  a[y,x]=[255,0,0]; #clear point as Red (just for visual purpose)
  area=1 #at least 1 point is filled
  for _y in range(-1,2):  #зовнішній цикл для перебору точок по Oy
    for _x in range(-1,2):#внутрішній цикл для перебору точок по Ox
      area=area+fillarea(a,x+_x,y+_y) #додавання координат точок, потрібно заповнити червоним у функцію fillarea, яка повторно викликається
  return area; #повернення замальованої площі

im = Image.new('RGB', (270, 400), (255, 255, 255)) #створення картинки з розмірами 270*400px та білим фоном
draw = ImageDraw.Draw(im) #створення об'єкта для редагування
draw.rectangle((0, 11, 20, 30), fill=(0, 0, 0)) #створення прямокутника з крайньою лівою верхньою точкою (0,11) та нижньою правою (20,30) і заповнений чорним кольором
draw.rectangle((30, 40, 40, 45), fill=(0, 0, 0)) #створення прямокутника з крайньою лівою верхньою точкою (30,40) та нижньою правою (40,45) і заповнений чорним кольором


_xy = (                                          #координати відрізків(початок та кінець) для створення довільної фігури
            (350, 450),
            (50+100, 50+20),
            (50+10+20,50+20+10),
            (50+10+20+-20, 50+20+10+10),
            (50+10+20+-20+10,50+20+10+10+20),
            (50+10+20+-20+10+-20,50+20+10+10+20+-20)
      )

#draw.polygon(xy=_xy, fill='blue', outline=(0, 0, 0),width=1)
draw.polygon(xy=_xy, fill='blue', outline=(0, 0, 0)) #створення довільної фігури, заповненої синім кольором, чорним контуром та шириною 1px

#im.show()

a = np.array(im) # конвертація всього малюнка в массив за допомогою бібліотеки numpy
#np.setflags(write=1)

#Method1
count=0 # лічильник, який рахує пікселі = 0
for y in range(im.height): # перебираємо всі пікселі по висоті(вісь Oy)
 for val in a[y]:   #every point in y row (x)(перевіряємо кожен піксель по рядку, вісь Ox). Після того, як рядок закінчився, спрацьовує зовнішній цикл, який перекидає нас на наступний рядок по Ox
  if (val[0]!=255): #check just R from RGB (it is enough) #у нас загальний фон малюнка є білим(255,255,255) і щоб знайти інший колір, нам достатньо перевіряти тільки 0 елемент масива з кодом кольору. Якщо він != 255, то ми збільшуємо лічильник на 1
   count+=1 #збільшуємо лічильник на одиницю, якщо знаходимо потрібний піксель
print('area =',count) #виводимо загальну площу на екран

#Method2
count=0 # лічильник рівний 0
for y in range(im.height): # шукаємо піксель по висоті Oy
 for x in range(im.width):# шукаємо піксель по довжині Ox
  val=a[y,x] #точка у матриці, на якій у даний момент ми знаходимось
  if (val[0]!=255): #check just R from RGB (it is enough) #у нас загальний фон малюнка є білим(255,255,255) і щоб знайти інший колір, нам достатньо перевіряти тільки 0 елемент масива з кодом кольору. Якщо він != 255, то ми збільшуємо лічильник на 1
   count+=1 #збільшуємо лічильник на одиницю, якщо знаходимо потрібний піксель
print('area =',count) #виводимо загальну площу на екран

#Method3


count=0 # лічильник рівний 0
totalarea=0 # загальна площа усіх найдених фігур = 0
for y in range(im.height): # шукаємо піксель по висоті Oy
 for x in range(im.width): # шукаємо піксель по довжині Ox
  val=a[y,x] #точка у матриці, на якій у даний момент ми знаходимось
  if val[0]!=255: #just R #у нас загальний фон малюнка є білим(255,255,255) і щоб знайти інший колір, нам достатньо перевіряти тільки 0 елемент масива з кодом кольору. Якщо він != 255, то ми збільшуємо лічильник на 1
   count+=1 #збільшуємо лічильник на одиницю, якщо знаходимо фігуру
   area=fillarea(a,x,y)
   print(' i have found ',count,' figure with area = ',area) # виводимо кількість знайдених фігур та площу фігур
   totalarea+=area # загальна площа усіх найдених фігур
print('total area is ',totalarea) # виведення загальної площі
img = Image.fromarray(a) # функція, яка конвертує дані з масиву в зображення
img.show() #виводить зображення